== README

Clone the repo, then

    bundle

set up the postgres database like you normally would (see database.yml)

    createuser ...

migrate the database

    rake db:migrate

make a lot of messages

    $ rails console
    Message.count.upto(100) do |i|
      Message.new({content: "test #{i.to_s}"})
    end

run the server

    rails s puma

Test like this: (30 is how many requests you would make without streaming)

    ruby public/speedtest.rb 30

you can deploy your own and test if you want

From the browser, use the query params 

- stream=true to use streaming instead of normal HTTP
- times=X where X is how many times to send the response
   - for normal responses, it simulates a larger single response
   - for streaming, it represents a longer stream


like this:

    http://sse-basic-demo.herokuapp.com/check?stream=true&times=10000

My findings:

Streaming is faster on slow connections where you'd need to make multiple round trips otherwise

On fast connections, it's only faster when there are large individual responses

This also gets around the issue of timing out after 30 seconds on heroku

NOTE: this uses the puma webserver

-----

This README would normally document whatever steps are necessary to get the
application up and running.

Things you may want to cover:

* Ruby version

* System dependencies

* Configuration

* Database creation

* Database initialization

* How to run the test suite

* Services (job queues, cache servers, search engines, etc.)

* Deployment instructions

* ...


Please feel free to use a different markup language if you do not plan to run
<tt>rake doc:app</tt>.
